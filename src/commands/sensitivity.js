const { SlashCommandBuilder, ButtonInteraction } = require('discord.js');
const { SensitivityHandler } = require('../utils/SensitivityHandler');
const { Game } = require('../types/gameEnums');

const command = new SlashCommandBuilder()
  .setName('sensitivity')
  .setDescription('Generate optimized sensitivity settings for your device')
  .addStringOption(option =>
    option
      .setName('game')
      .setDescription('Select the game')
      .setRequired(true)
      .addChoices(
        { name: 'Free Fire', value: 'FF' },
        { name: 'Call of Duty Mobile', value: 'CODM' }
      )
  );

async function execute(interaction) {
  try {
    await interaction.deferReply();
    
    const game = interaction.options.getString('game');
    const handler = new SensitivityHandler(interaction, game);
    
    await handler.handle();

    // Set up button collectors
    const message = await interaction.fetchReply();
    const collector = message.createMessageComponentCollector({ time: 300000 }); // 5 minutes

    collector.on('collect', async (i) => {
      if (!i.isButton()) return;

      try {
        switch (i.customId) {
          case 'copy_settings':
            await handleCopySettings(i, handler);
            break;
          case 'share_settings':
            await handleShareSettings(i, handler);
            break;
          case 'export_settings':
            await handleExportSettings(i, handler);
            break;
          case 'reconfigure':
            await handleReconfigure(i, handler);
            break;
        }
      } catch (error) {
        console.error('Error handling button interaction:', error);
        if (!i.replied && !i.deferred) {
          await i.reply({
            content: 'An error occurred while processing your request.',
            ephemeral: true
          });
        }
      }
    });

    collector.on('end', async () => {
      try {
        // Disable buttons when collector ends
        const updatedMessage = await interaction.fetchReply();
        if (updatedMessage.components && updatedMessage.components.length > 0) {
          const disabledComponents = updatedMessage.components.map(row => {
            const newRow = { ...row };
            newRow.components = newRow.components.map(component => ({
              ...component,
              disabled: true
            }));
            return newRow;
          });

          await interaction.editReply({
            components: disabledComponents
          });
        }
      } catch (error) {
        console.error('Error disabling components:', error);
      }
    });

  } catch (error) {
    console.error('Error in sensitivity command:', error);
    
    // Check if we can still respond
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({ 
        content: 'An error occurred while setting up the sensitivity configuration.',
        ephemeral: true
      });
    } else {
      await interaction.editReply({ 
        content: 'An error occurred while setting up the sensitivity configuration.',
        components: []
      });
    }
  }
}

async function handleCopySettings(interaction, handler) {
  // Get settings text from handler
  const settingsText = handler.getSettingsText();
  
  // Format the settings in a code block
  const formattedText = [
    '```',
    `${handler.getGame()} Sensitivity Settings`,
    `Device: ${handler.getDeviceName()}`,
    '',
    settingsText,
    '```'
  ].join('\n');
  
  await interaction.reply({
    content: `ðŸ“‹ Here are your settings:\n${formattedText}`,
    ephemeral: true
  });
}

async function handleShareSettings(interaction, handler) {
  // Generate a shareable summary
  const deviceName = handler.getDeviceName();
  const game = handler.getGame();
  
  await interaction.reply({
    content: `ðŸ”— **Shareable Settings:**\n${game} settings for ${deviceName}\nGenerated by Sensitivity Calculator Bot`,
    ephemeral: false // Make it public so others can see
  });
}

async function handleExportSettings(interaction, handler) {
  await interaction.reply({
    content: 'ðŸ“¥ Image export feature coming soon! For now, use the copy button to get your settings.',
    ephemeral: true
  });
  // TODO: Add image generation logic here
}

async function handleReconfigure(interaction, handler) {
  // Start a new configuration process
  const game = handler.getGame();
  const newHandler = new SensitivityHandler(interaction, game);
  
  await interaction.update({
    content: 'Starting new configuration...',
    components: [],
    embeds: []
  });
  
  await newHandler.handle();
}

module.exports = { command, execute };
